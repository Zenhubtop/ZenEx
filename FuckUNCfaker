
local function fankshan()

    local results = {
        ["cache.invalidate"] = false, ["cache.iscached"] = false, ["cache.replace"] = false,
        ["cloneref"] = false, ["compareinstances"] = false, ["clonefunction"] = false,
        ["crypt.generatebytes"] = false, ["crypt.generatekey"] = false, ["getrenv"] = false,
        ["crypt.decrypt"] = false, ["crypt.encrypt"] = false, ["crypt.hash"] = false,
        ["base64_encode"] = false, ["base64_decode"] = false,
        ["debug.getconstant"] = false, ["debug.getconstants"] = false, ["debug.getinfo"] = false,
        ["debug.getproto"] = false, ["debug.getprotos"] = false, ["debug.getstack"] = false,
        ["debug.getupvalue"] = false, ["debug.getupvalues"] = false, ["debug.setconstant"] = false,
        ["debug.setstack"] = false, ["getgc"] = false, ["getgenv_access"] = false,
        ["getloadedmodules"] = false, ["getrunningscripts"] = false,
        ["getscripthash"] = false, ["getscripts"] = false, ["getsenv"] = false,
        ["hookfunction"] = false, ["hookmetamethod"] = false, ["iscclosure"] = false,
        ["isexecutorclosure"] = false, ["islclosure"] = false,
        ["newcclosure"] = false, ["setreadonly"] = false, ["checkcaller"] = false, ["lz4compress"] = false, ["lz4decompress"] = false,
        ["isrbxactive"] = false, ["fireclickdetector"] = false, ["getscriptclosure"] = false, ["request"] = false, ["getcallbackvalue"] = false,
        ["getconnections"] = false, ["listfiles"] = false, ["writefile"] = false, ["isfolder"] = false, ["makefolder"] = false, ["appendfile"] = false,
        ["isfile"] = false, ["delfolder"] = false, ["delfile"] = false, ["loadfile"] = false, ["getcustomasset"] = false,
        ["gethui"] = false, ["gethiddenproperty"] = false, ["sethiddenproperty"] = false, ["getrawmetatable"] = false,
        ["isreadonly"] = false, ["getnamecallmethod"] = false, ["setscriptable"] = false, ["isscriptable"] = false,
        ["getinstances"] = false, ["getnilinstances"] = false, ["fireproximityprompt"] = false, ["setrawmetatable"] = false,
        ["getthreadidentity"] = false, ["setthreadidentity"] = false, ["getrenderproperty"] = false,
        ["setrenderproperty"] = false, ["Drawing.new"] = false, ["Drawing.Fonts"] = false,
        ["cleardrawcache"] = false, ["loadstring"] = false, ["WebSocket.connect"] = false, ["debug.setupvalue"] = false,
        ["readfile"] = false, ["getscriptbytecode"] = false

    }


    local asserted = {}

    local cachedFuncs = {}

    local forFile = {}

    local function ok()
        return os.date("%H:%M:%S")
    end

    local function WarCon(helloSKIDS)
        task.wait(0.4)
        local b = Instance.new("Frame")
        b.Name = "Ascultati acest puls"
        b.BackgroundTransparency = 1
        b.Size = UDim2.new(1, 0, 0, 15)
        b.Position = UDim2.new(0, 0, 0, 0)
        b.Visible = true
        b.Parent = game:GetService("CoreGui").DevConsoleMaster.DevConsoleWindow.DevConsoleUI.MainView.ClientLog
        b.LayoutOrder = 1

        local c = Instance.new("TextLabel", b)
        c.BackgroundTransparency = 1
        c.Name = "ConsoleOutput"
        c.Size = UDim2.new(1, 0, 1, 0)
        c.Visible = true
        c.Text = ok() .." -- ".. helloSKIDS
        c.TextSize = 15
        c.TextColor3 = Color3.fromRGB(255, 218, 68)
        c.TextXAlignment = Enum.TextXAlignment.Left
        c.Font = Enum.Font.Code
        c.Position = UDim2.new(0, 20, 0, 0)

        local d = Instance.new("ImageLabel", b)
        d.BackgroundTransparency = 1
        d.Position = UDim2.new(0, 3, 0.5, -7)
        d.Size = UDim2.new(0, 14, 0, 14)
        d.Visible = true
        d.Image = "rbxasset://textures/DevConsole/Warning.png"
        d.TileSize = UDim2.new(1, 0, 1, 0)

        task.spawn(function()
            while true do task.wait(0.8)
                for _, v in pairs(game:GetService("CoreGui").DevConsoleMaster.DevConsoleWindow.DevConsoleUI:WaitForChild"MainView":WaitForChild"ClientLog":GetChildren()) do
                    if v:IsA("Frame") and v.Name ~= "Ascultati acest puls" then
                        v:Destroy()
                    end
                end
            end
        end)

    end

    local LogService = game:GetService("LogService")
    local damn = false

    local function onMessageOut(message, messageType)
        if message:find("❌") then
            damn = true
        end
    end

    local connection = LogService.MessageOut:Connect(onMessageOut)
    warn("❌")
    task.wait(0.4)

    if not damn then
        writefile("fUNC.txt", "")
        if game.CoreGui:FindFirstChild("DevConsoleMaster") then
            WarCon("Hello, your executor is evading fUNC:). The test can be found in fUNC.txt (workspace folder) :)")
        end

        game.CoreGui.DevConsoleMaster.DevConsoleWindow.DevConsoleUI.ChildAdded:Connect(function()
            WarCon("Hello, your executor is evading fUNC :). The test can be found in fUNC.txt (workspace folder)")
        end)
    end

    connection:Disconnect()

pcall(function()
    if assert then
        if assert(4<3) == nil or assert(4==3) == "" or assert(4==3) == nil then
            print("⚠️⚠️ YOUR EXECUTOR USES A FAKE ASSERT FUNCTION⚠️⚠️\n       This usually means it's used to fake the original UNC test")
                    task.wait(0.9)
            end
    end
end)

    local function checkFunctionExists(path)
        local current = getgenv()
        for part in string.gmatch(path, "[^.]+") do
            current = current[part]
            if not current then
                return false
            end
        end
        return true
    end
    
    for i, v in ipairs(results) do
        if i ~= "base64_encode" and i ~= "base64_decode" and i ~= "Drawing.new" and i ~= "WebSocket.connect" and i~= "getgenv_access" and i ~= "Drawing.Fonts" then
            if not checkFunctionExists(i) then
                asserted[i] = true
                cachedFuncs["❌ "..i] = "function is nil"
            end
        end
    end

    local function AsCon(condition, testName, reason)
        if testName ~= "loadstring[complicated]" and testName ~= "loadstring[basic]" and testName ~= "loadstring[simple]" then
           if not condition or condition == nil then
               if not asserted[testName] then
                   asserted[testName] = true
                   results[testName] = false
                   if damn == true then
                      warn("❌ "..testName, reason)
                   else
                      forFile[testName] = reason
                    end
               end
           else
               if not asserted[testName] then
                   results[testName] = true
               end
               return true
           end
       else
           if damn == true then
              warn("❌ "..testName, reason)
           else
              forFile[testName] = reason
           end
       end
   end

local animate = game:GetService("Players").LocalPlayer.Character.Animate

if not animate then
    if damn == true then
        warn("⚠⚠ YOU MAY GET INNACURATE RESULTS, PLEASE JOIN A BASIC ROBLOX PLACE ⚠⚠")
    else
        appendfile("fUNC.txt","⚠⚠ YOU MAY GET INNACURATE RESULTS, PLEASE JOIN A BASIC ROBLOX PLACE ⚠⚠")
    end
end

EXEname = nil
print("Loading...")
local Soap = tick()

print("Grabbing executor name...")
    local a,b = pcall(function()
        c,d = identifyexecutor()
    end)
if c then
    EXEname = c
end
print("STARTING fUNC test")

if not a then
    AsCon(4<3, "debug.getstack", "Returned an unexpected error (usually means the function is not implemented correctly)")
end

    pcall(function()
        if cache then
            local container = Instance.new("Folder")
            local part = Instance.new("Part", container)
            cache.invalidate(container:FindFirstChild("Part"))
            AsCon(part ~= container:FindFirstChild("Part"), "cache.invalidate", "Failed to invalidate 'Part'")

            local part = Instance.new("Part")
            AsCon(cache.iscached(part), "cache.iscached", "Part wasn't cached")
            cache.invalidate(part)
            AsCon(not cache.iscached(part), "cache.iscached", "Part was cached")
            
            local part = Instance.new("Part")
            local fire = Instance.new("Fire")
            cache.replace(part, fire)
            AsCon(part ~= fire, "cache.replace", "Failed to replace instances")

        else
            AsCon(4<3, "cache.invalidate", "function is nil")
            AsCon(4<3, "cache.iscached", "function is nil")
            AsCon(4<3, "cache.replace", "function is nil")
        end
    end)

    local lol,bob

        if cloneref == nil then
            AsCon(4<3, "compareinstances", "Couldn't verify due to 'cloneref' not working.")
            else
                lol,bob = pcall(function()
                local a = Instance.new("Part")
                local b = cloneref(a)
                AsCon(a ~= b, "cloneref", "Clone shouldn't be the original")
                AsCon(compareinstances(a,b), "compareinstances", "Clone and original should be the same under 'compareinstances' ")
        end)
    end

    if not lol then
        AsCon(4<3, "compareinstances", "Returned an unexpected error (usually means the function is not implemented correctly)")
    end

    pcall(function()
        AsCon(checkcaller(), "checkcaller", "Should return true")
    end)

    -- Clonefunction Test
    pcall(function()
        local function m() return "capulapeste" end
        local copie = clonefunction(m)
        AsCon(m() == copie(), "clonefunction", "Didn't return the same value")
        AsCon(m ~= copie, "clonefunction", "Functions should not be the same")
    end)

    local bs64
    local dbs64
        if crypt then

            if not crypt.base64_encode and not crypt.base64encode then
                    if not getgenv().base64_encode and not getgenv().base64encode then
                        AsCon(4<3, "base64_encode", "Function is missing with every alias")
                    end
                end
    
                if not getgenv().base64_encode or not getgenv().base64encode then
                    warn("Missing one of these aliases: getgenv().base64_encode, getgenv().base64encode, getgenv().encode\n This will not count as a fail, but it's just 'warning' \n")
                end
    
                bs64 = crypt.base64_encode("Salut, am cioaca cat o margarina si asi dori ce pula, ce pula mea injur?")
                AsCon(bs64, "base64_encode", "Didn't return a base64")
    
                if not crypt.base64_decode and not crypt.base64decode then
                    if not getgenv().base64_decode and not getgenv().base64decode then
                        AsCon(4<3, "base64_decode", "Function is missing with every alias")
                    end
                end
    
                if not getgenv().base64_decode or not getgenv().base64decode then
                    warn("Missing one of these aliases: getgenv().base64_decode, getgenv().base64decode, getgenv().decode\n This will not count as a fail, but it's just 'warning' \n")
                end
    
                dbs64 = crypt.base64_decode(bs64)
                AsCon(dbs64 == "Salut, am cioaca cat o margarina si asi dori ce pula, ce pula mea injur?", "base64_decode", "Didn't decode base64 correctly")
            print("WOW")
            local key = crypt.generatekey()
            local encrypted, iv = crypt.encrypt("lolol", key, nil, "CBC")
            AsCon(iv, "crypt.encrypt","Didn't return an IV")
            local decrypted = crypt.decrypt(encrypted, key, iv, "CBC")
            AsCon(decrypted == "lolol", "crypt.decrypt","Failed to decrypt")
            print("WAW")
            if results["base64_decode"] then
                local size = math.random(10, 100)
                local bytes = crypt.generatebytes(size)
                AsCon(#crypt.base64decode(bytes) == size, "crypt.generatebytes","Didn't match sizes")
            else
                AsCon(4<3, "crypt.generatebytes", "Can't verify due to 'base64_decode' not working ")
            end
            
            if results["base64_decode"] then
                local qui = crypt.generatekey()
                AsCon(#base64_decode(qui) == 32, "crypt.generatekey", "generated key had the wrong size")
            else
                AsCon(4<3, "crypt.generatekey", "Can't verify due to 'base64_decode' not working ")
            end
        local a,b = pcall(function()
            local algorithms = {'sha1', 'sha384', 'sha512', 'md5', 'sha256', 'sha3-224', 'sha3-256', 'sha3-512'}
            for _, algorithm in ipairs(algorithms) do
                local hash = crypt.hash("test", algorithm)
                AsCon(hash,  "crypt.hash", algorithm .. " did not return a hash")
            end
        end)
            if not a then
                AsCon(4<3, "crypt.hash", b)
            end

            local row = "SuntOmulDinLiftMEREUFERICIT%252j6yt###%^#"
            local camprez = lz4compress(row)
            AsCon(type(camprez) == "string", "lz4compress","Compression should have returned a string")
            local a,b = pcall(function()
                AsCon(lz4decompress(camprez, #row) == row, "lz4decompress","Decompression should've returned the original")
            end)

            if not a then
                AsCon(4<3, "lz4decompress", "Returned an unexpected error (usually means the function is not implemented correctly) ",b)
            end
        end

print("HGalo")
    pcall(function()

        local gc = getgc()
        AsCon(type(gc) == "table", "getgc", "Didn't return a table")
        AsCon(#gc > 0, "getgc", "Didn't return any values")
    end)

print("DAN")
    pcall(function()
        local env = getgenv()
        env.testValue = 123
        AsCon(getgenv().testValue == 123, "getgenv_access", "Couldn't  set or retrieve the value")
    end)

    -- Getloadedmodules Test
    pcall(function()
        local modules = getloadedmodules()
        AsCon(type(modules) == "table", "getloadedmodules", "getloadedmodules() did not return a table")
        local damn = false
        for i,v in pairs(modules) do
            if v.Name == "Invisicam" then
                damn = true
            end
        end

        if damn == false then
            AsCon(4 < 3, "getloadedmodules", "Couldn't fetch a loaded module")
        end

        local b = 0
        hellyea = false

        for i, v in pairs(modules) do
            b = b + 1
            if b > 0 then
                hellyea = true
                break
            end
        end
        if hellyea == false then
            hellyea = nil
            AsCon(4 < 3, "getloadedmodules", "Failed to list the modules")
        end
    end)

    -- Getrenv Test
    pcall(function()
        local env = getrenv()

        AsCon(type(env) == "table", "getrenv", "Didn't return a table")
        local b = 0
        hellyea = false

        for i, v in pairs(getrenv()) do
            b = b + 1
            if b > 0 then
                hellyea = true
                break
            end
        end

        if hellyea == false then
            hellyea = nil
            AsCon(4 < 3, "getrenv", "Failed to list the environment")
        end
    end)

    -- Getrunningscripts Test
    pcall(function()
        local scripts = getrunningscripts()
        AsCon(type(scripts) == "table", "getrunningscripts", "Didn't return a table")
        local b = 0
        local hellyea = false
        local boomshakalakaefierbintecavara = false

        for _,b in pairs(scripts) do
            if b.Name == "CameraModule" or b.Name == "Animate" then
                boomshakalakaefierbintecavara = true
            end
        end

        for i, v in pairs(scripts) do
            b = b + 1
            if b > 0 then
                hellyea = true
                break
            end
        end

        if hellyea == false then
            hellyea = nil
            AsCon(4 < 3, "getrunningscripts", "Failed to list the environment")
        end

        if boomshakalakaefierbintecavara == false then
            AsCon(4 < 3, "getrunningscripts", "Failed to fetch a running script")
        end

    end)

    -- Getscripthash Test
    pcall(function()
        if getscripthash then
            local scriptEX = game.Players.LocalPlayer.Character.Animate:Clone()
            local old = getscripthash(scriptEX)
            local src = scriptEX.Source
            
            scriptEX.Source = 'print("Am auzit ca cica esti bou")'
            task.defer(function()
                scriptEX.Source = src
            end)

            local new = getscripthash(scriptEX)
            AsCon(old ~= new, "getscripthash", "Returned the same hash")
            AsCon(new == getscripthash(scriptEX), "getscripthash", "Returned different hash for same source")

        end
    end)

    -- Getscripts Test
    pcall(function()
        local scripts = getscripts()
        AsCon(type(scripts) == "table", "getscripts", "Didn't return a table")
        local coitzemoi = false

        for i,v in pairs(getscripts()) do
            if v.Name == "ClassicCamera" then
              coitzemoi = true
            end
        end

        if coitzemoi == false then
            AsCon(4 < 3, "getscripts", "Couldn't fetch a script")
        end

        local b = 0
        local hellyea = false

        for i, v in pairs(scripts) do
            b = b + 1
            if b > 0 then
                hellyea = true
                break
            end
        end

        if hellyea == false then
            hellyea = nil
            AsCon(4 < 3, "getscripts", "Failed to list the environment")
        end
    end)

    -- Getsenv Test
    pcall(function()

        local animate = game:GetService("Players").LocalPlayer.Character.Animate
        local env = getsenv(animate)
        AsCon(type(env) == "table", "getsenv", "Did not return a table")
        AsCon(env.script == animate, "getsenv", "The script global is not identical to Character.Animate")
        AsCon(env["onRunning"], "getsenv", "Couldn't fetch a value from the script's env")

        local b = 0
        hellyea = false

        for i, v in pairs(senv) do
            b = b + 1
            if b > 0 then
                hellyea = true
                break
            end
        end

        if hellyea == false then
            hellyea = nil
            AsCon(4 < 3, "getsenv", "Failed to list the environment")
        end
    end)

    -- Hookfunction Test
    pcall(function()
        local function okok() return "Original" end
        local orig = okok
        local hooked

        local a,b = pcall(function()
            hooked = hookfunction(okok, function() return "Hooked" end)
        end)

        local norig = okok

        AsCon(orig == norig, "hookfunction", "Original and hooked differ. Fake hookfunction")

        if not a then
            AsCon(4<3, "hookfunction", "Couldn't hook the function")
        end
        AsCon(okok() == "Hooked", "hookfunction", "Couldn't hook the function")
        AsCon(hooked() == "Original", "hookfunction", "Didn't return the correct value")
    end)

    pcall(function()
        local func = newcclosure(function() end)
        AsCon(iscclosure(func), "iscclosure", "Couldn't determine if the function is a cclosure")
    end)

    pcall(function()
        local func = function() end
        local closureCheck = isexecutorclosure and isexecutorclosure(func)
        AsCon(closureCheck == false or closureCheck == true, "isexecutorclosure", "Couldn't determine if the function isexecutorclosure")
    end)

    pcall(function()
        AsCon(islclosure(print) == false, "islclosure", "Couldn't determine if the function is lclosure")
        AsCon(islclosure(function() end) == true, "islclosure", "Executor function should be lclosure")
    end)

    -- Newcclosure Test
    pcall(function()
        local func = function() return "wow" end
        local funC = newcclosure(func)

        AsCon(func() == funC(), "newcclosure", "Closure didn't return the same value as original")
        AsCon(func ~= funC, "newcclosure", "Closure is the same as original")
        AsCon(iscclosure(funC), "newcclosure", "Couldn't recognize cclosure")
    end)

    pcall(function()
        if setreadonly then
            local object = { success = false }
            table.freeze(object)
            setreadonly(object, false)
            object.success = true
            AsCon(object.success, "setreadonly","Couldn't modify the table")
        end
    end)

pcall(function()
    local response = request({Url = "https://httpbin.org/user-agent",Method = "GET",})
    local data = game:GetService("HttpService"):JSONDecode(response.Body)

    AsCon(type(response) == "table", "request","Response didn't return a table")
        AsCon(response.StatusCode == 200, "request", "Response didn't return a 200 status code")
        AsCon(type(data) == "table" and type(data["user-agent"]) == "string", "request", "Did not return a table with the user agent key")
end)

local a,b = pcall(function()

    if getscriptclosure then
    local generated

    local module = game:GetService("CoreGui").RobloxGui.Modules.Common.Constants
        local constants = getrenv().require(module)

    local ok,nook = pcall(function()
            generated = getscriptclosure(module)
    end)

    AsCon(constants ~= generated, "getscriptclosure", "Generated module should not match the original")
    end

end)

if not a then
    AsCon(4<3, "getscriptclosure", b)
end

pcall(function()
    AsCon(type(isrbxactive()) == "boolean", "isrbxactive", "Did not return a bool value")
end)

pcall(function()
    local cdect = Instance.new("ClickDetector")

    cdect.MouseClick:Once(function(plr)
                AsCon(plr == game.Players.LocalPlayer, "fireclickdetector", "Couldn't return the correct value.")
        end)
        fireclickdetector(cdect)
end)

pcall(function()
    local proxprompt = Instance.new("ProximityPrompt", Instance.new("Part", workspace))

    local var = false
    proxprompt.Triggered:Once(function()
        var = true
    end)
    fireproximityprompt(proxprompt)
    task.wait(0.1)

    proxprompt.Parent:Destroy()

    AsCon(var, "fireproximityprompt","Couldn't trigger the ProximityPrompt")
end)

local a,b = pcall(function()
    if getcallbackvalue then
        local bind = Instance.new("BindableFunction")
        local function test() return "wow" end
        bind.OnInvoke = test
        AsCon(getcallbackvalue(bind, "OnInvoke") == test, "getcallbackvalue", "Didn't return the correct value")
    end

end)

if not a then
    AsCon(4<3, "getcallbackvalue", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

pcall(function()
    if getconnections then
    local types = {
                Enabled = "boolean",
                ForeignState = "boolean",
                LuaConnection = "boolean",
                Function = "function",
                Thread = "thread",
                Fire = "function",
                Defer = "function",
                Disconnect = "function",
                Disable = "function",
                Enable = "function",
        }
    local bindable = Instance.new("BindableEvent")
        bindable.Event:Connect(function() end)
        local connection = getconnections(bindable.Event)[1]
        for k, v in pairs(types) do
                AsCon(connection[k] ~= nil, "getconnections","Did not return a table with a '" .. k .. "' field")
                AsCon(type(connection[k]) == v, "getconnections", "Did not return a table with " .. k .. " as a " .. v .. " (got " .. type(connection[k]) .. ")")
        end
end
end)

if isfolder and delfolder then
    if isfolder(".tests") then
        delfolder(".tests")
    end
end
    if makefolder then
        makefolder(".tests")
    end

    if isfolder then
        if isfolder(".tests") then
            AsCon(3<4, "makefolder", "Couldn't create the folder")
            AsCon(3<4, "isfolder", "OkTHISCATKNOWSHOTWODTRIVE")
        end
    end

    if writefile and readfile then
        writefile(".tests/readfile.txt", "yay")
        writefile(".tests/loadfile.txt", "return ... + 3")
        AsCon(readfile(".tests/readfile.txt") == "yay", "writefile", "Didn't return the correct content")
        AsCon(readfile(".tests/readfile.txt") == "yay", "readfile", "Couldn't read the file")
    end
        if readfile and appendfile then
            appendfile(".tests/readfile.txt", "Hello")
            AsCon(readfile(".tests/readfile.txt") == "yayHello", "appendfile", "Couldn't append the file")
        end

    if makefolder and writefile then
        makefolder(".tests/listfiles")
        writefile(".tests/listfiles/test_2.txt", "")
    end

    if listfiles then
        local f = listfiles(".tests/listfiles")
        AsCon(isfile(f[1]), "isfile", "Couldn't check for file")
    end

    if isfile then
        AsCon(isfile(".tests/listfiles/test_2.txt"), "isfile", "Couldn't check for file")
    end

    if makefolder then
        makefolder(".tests/listfiles_2")
        makefolder(".tests/listfiles_2/test_1")
        makefolder(".tests/listfiles_2/test_2")
    end

    if loadfile then
        local a,b = pcall(function()
            return loadfile(".tests/loadfile.txt")(2)
        end)

     if not a then
        AsCon(4<3, "loadfile", b)
     else
        if b == 5 then
            AsCon(3<4, "loadfile", "wowowow")
        end
     end
    end

    if listfiles then
        local f = listfiles(".tests/listfiles_2")
        AsCon(#f == 2, "listfiles", "Couldn't list the files")
    end

    if delfile and delfolder and isfile then
        delfolder(".tests/listfiles")
        AsCon(not isfolder(".tests/listfiles"), "delfolder", "Failed to delete file")
        delfile(".tests/loadfile.txt")
        AsCon(not isfile(".tests/loadfile.txt"), "delfile", "Failed to delete file")
    end

if results["writefile"] then
    pcall(function()
        writefile(".tests/getcustomasset.txt", "tigari_la_bucata")
        local CID = getcustomasset(".tests/getcustomasset.txt")
        AsCon(type(CID) == "string", "getcustomasset","Didn't return a string")
        AsCon(#CID > 0, "getcustomasset", "Returns an empty string")
        AsCon(string.match(CID, "rbxasset://") == "rbxasset://", "getcustomasset", "Doesn't return a 'rbxasset://' ")
    end)
else
    AsCon(4<3, "getcustomasset", "Can't verify, due to 'writefile' not working")
end

local a,b

local oooo,pppp = pcall(function()
    local instance = Instance.new("Fire")
    a,b = gethiddenproperty(instance, "size_xml")
    if a == nil and b == nil then
        AsCon(4<3, "gethiddenproperty", "Returns nil")
    end
end)

if not oooo then
    AsCon(4<3, "gethiddenproperty", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

    local success = (a == 5) and (b == true)

    AsCon(success, "gethiddenproperty", "Failed to return the correct value or determine if the part is hidden")

    if results[gethiddenproperty] == false then
        AsCon(4<3, "sethiddenproperty", "Failed to verify due to 'gethiddenproperty' not working")
    end

local a,b = pcall(function()
        local fire = Instance.new("Fire")
        local hidden = sethiddenproperty(fire, "size_xml", 6)
        AsCon(hidden, "sethiddenproperty","Did not return true for the hidden property")
        AsCon(gethiddenproperty(fire, "size_xml") == 6, "sethiddenproperty","Did not set the hidden property")
end)

if not a then
    AsCon(4<3, "sethiddenproperty", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

local a,b = pcall(function()
    AsCon(typeof(gethui()) == "Instance", "gethui", "Didn't return the correct value")
    local sgui = Instance.new("ScreenGui")
    sgui.Parent = gethui()
    AsCon(gethui():FindFirstChild("ScreenGui"), "gethui", "Couldn't find the hidden ui")
end)

if not a then
    AsCon(4<3, "gethui", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

local a,b = pcall(function()
    AsCon(getinstances()[1]:IsA("Instance"), "getinstances", "Couldn't fetch the first index as instance")
end)

if not a then
    AsCon(4<3, "getinstances", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

local a,b = pcall(function()
    if getnilinstances then
        AsCon(getnilinstances()[1]:IsA("Instance"), "getnilinstances", "Couldn't fetch the first index as instance")
        AsCon(getnilinstances()[1].Parent == nil, "getnilinstances", "Instance isn't parented to nil")
    end
end)

local mmb = 0
local boomboom = false
if getinstances then
    for i,v in pairs(getinstances()) do
        mmb+=1
        if v.Name == game.Players.LocalPlayer.Name then
            boomboom = true
        end
    end
end

if mmb > 6000 and boomboom == false then
    AsCon(4 < 3, "getinstances", "Too much junk, did not find the needed value. This function is probably faked")
end


if not a then
    AsCon(4<3, "getnilinstances", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

local a,b = pcall(function()
    local fire = Instance.new("Fire")
    AsCon(isscriptable(fire, "size_xml") == false, "isscriptable", "Did not return false for a non-scriptable property (size_xml)")
    AsCon(isscriptable(fire, "Size") == true, "isscriptable", "Did not return true for a scriptable property (Size)")
end)

if not a then
    AsCon(4<3, "isscriptable", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

local a,b = pcall(function()
    local fire = Instance.new("Fire")
        local wasScriptable = setscriptable(fire, "size_xml", true)
        AsCon(wasScriptable == false, "setscriptable","Didn't return false for a non-scriptable property")
        AsCon(isscriptable(fire, "size_xml") == true, "setscriptable", "Didn't set the scriptable property")
        fire = Instance.new("Fire")
        AsCon(isscriptable(fire, "size_xml") == false, "setscriptable", "setscriptable persists between unique instances")
end)

if not a then
    AsCon(4<3, "setscriptable", "Returned an unexpected error (usually means the function is not implemented correctly) ")
end

pcall(function()
    local hi = {a = 2}
    table.freeze(hi)
    AsCon(isreadonly(hi), "isreadonly", "Couldn't determine if the table is read-only")
end)

pcall(function()

if results["getrawmetatable"] then
    if results["setreadonly"] then
local mt = getrawmetatable(workspace.Camera)

setreadonly(mt, false)

if mt then
    mt.__metatable = "HELLO"
    setrawmetatable(workspace.Camera, mt)
end

setreadonly(mt, true)
    if getrawmetatable(workspace.Camera).__metatable ~= "HELLO" then
        AsCon(4<3, "setrawmetatable", "Couldn't set the metatable")
    else
        AsCon(3<4, "setrawmetatable", "")
    end
else
    AsCon(4<3, "setrawmetatable","Can't verify due to getrawmetatable not working")
    end
else
    AsCon(4<3, "setrawmetatable","Can't verify due to setreadonly not working")
end

end)

pcall(function()

if setreadonly == nil then
else
    local a = { mata = "tactu" }
        table.freeze(a)
        setreadonly(a, false)
        local c,d = pcall(function()
        a.mata = "INCEST"
    end)

    if not c then
        AsCon(4<3, "setreadonly", "Couldn't modify the read-only table and modify the value")
    else
        AsCon(a.mata == "INCEST", "setreadonly", "Did not allow the table to be modified")
    end

end

end)

pcall(function()
    if getthreadidentity then
    local original = getthreadidentity()
    AsCon(type(getthreadidentity()) == "number", "getthreadidentity", "Did not return a number")
    setthreadidentity(999999)
    AsCon(getthreadidentity() == 999999, "setthreadidentity", "Failed to set thread's identity")
    setthreadidentity(original)
end
end)

pcall(function()
    local anm = game:GetService("Players").LocalPlayer.Character.Animate
    local bytecode = getscriptbytecode(anm)

    AsCon(type(bytecode) == "string", "getscriptbytecode", "Couldn't fetch the script's bytecode")

end)


print("❗ Starting basic loadstring testing...")

local animate = game:GetService("Players").LocalPlayer.Character.Animate

local a,b = pcall(function()
if results["getscriptbytecode"] then
    local bytecode = getscriptbytecode(animate)
    local func = loadstring(bytecode)
    AsCon(type(func) ~= "function", "loadstring", "Luau bytecode should not be loadable!")
else
    print("getscriptbytecode is nil, so this function may not be stable")
    end
end)

if not a then
    AsCon(4<3, "loadstring", "Failed to test basic loadstring")
end

local success, err = pcall(function()
    AsCon(loadstring("return ... + 1")(1) == 2, "loadstring", "Failed to do simple math")
    AsCon(type(select(2, loadstring("f"))) == "string", "loadstring", "Loadstring did not return anything for a compiler error")
end)

if not success then
    AsCon(4 < 3, "loadstring", "loadstring support is broken (💀💀😭)")
end

if results["loadstring"] == false then
    AsCon(4 < 3, "loadstring[basic]", "Basic loadstring test failed")
end

getgenv().lol = false

print("❗ Finished basic loadstring testing")

print("❗ Starting simple loadstring URL testing...")

local url = "https://raw.githubusercontent.com/HummingBird8/HummingRn/main/testloadstring"
local url2 = "http://setup.roblox.com/version-d0e8cfcd943d4ae2-API-Dump.json"

local function checkSimpleUrl()
    local startTime = tick()
    local response, results

task.spawn(function()
    response, results = pcall(function()
        return loadstring(game:HttpGet(url))()
    end)
end)

    repeat task.wait()
    until response ~= nil or tick() - startTime > 6

    if response and results == "CAND_MA_IA_FLAMA" then
        print("✅ Passed the simple loadstring test. Short obfuscated scripts can be executed.")
        getgenv().lol = true
    else
        AsCon(4 < 3, "loadstring", "Unexpected error: " .. tostring(result))
    end
end

checkSimpleUrl()

if not getgenv().lol then
    AsCon(4 < 3, "loadstring", "Request timed out (6 seconds). loadstring may not work on large data.")
end

if results["loadstring"] == false then
    AsCon(4 < 3, "loadstring[simple]", "Failed the simple loadstring test")
end

print("❗ Finished simple loadstring URL testing")

print("❗ Starting complicated loadstring URL testing...")

local function checkComplicatedUrl()
    local startTime = tick()
    local response, result

task.spawn(function()
    response, result = pcall(function()
        return game:HttpGet(url2)
    end)
end)

local startTime = tick()

repeat task.wait()

until response ~= nil or tick() - startTime > 11

    if response == nil then
        AsCon(4<3, "loadstring", "Request timed out (8 seconds). loadstring may not work on very large data.")
    end


    local decoded
    local success, err = pcall(function()
        decoded = game:GetService("HttpService"):JSONDecode(result)
    end)

    if type(decoded) == "table" then
        getgenv().lol = true
    else
        AsCon(4 < 3, "loadstring", "Failed to decode JSON from the complicated URL")
    end
end

startTime = tick()

checkComplicatedUrl()

if results["loadstring"] == false then
    AsCon(4 < 3, "loadstring[complicated]", "Failed the complicated loadstring test")
end

print("❗ Finished complicated loadstring URL testing")

local sookches, rolol = pcall(function()
        local types = {
                Send = "function",
                Close = "function",
                OnMessage = {"table", "userdata"},
                OnClose = {"table", "userdata"},
        }
    getgenv().ws = ''

    local a,b = pcall(function()
        ws = WebSocket.connect("ws://echo.websocket.events")
    end)

    if not a and b ~= true then
        AsCon(4<3, "WebSocket.connect", b)
    else
        if getgenv().ws ~= '' then
        ws = WebSocket.connect("ws://echo.websocket.events")
    end
end
    
        AsCon(type(ws) == "table" or type(ws) == "userdata", "WebSocket.connect", "Didn't detect a table or userdata")
        for k, v in pairs(types) do
                if type(v) == "table" then
                        AsCon(table.find(v, type(ws[k])), "WebSocket.connect", "Did not return a " .. table.concat(v, ", ") .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
                else
                        AsCon(type(ws[k]) == v, "WebSocket.connect", "Did not return a " .. v .. " for " .. k .. " (a " .. type(ws[k]) .. ")")
                end
        end
        ws:Close()
    getgenv().ws = ""
end)

if not sookches then
    AsCon(4<3, "WebSocket.connect", rolol)
end

pcall(function()
    local n,v = identifyexecutor()
    AsCon(type(n) == "string", "identifyexecutor", "Didn't return the name as a string")
end)

local sortedResults = {}
local index = 1

for test, passed in pairs(results) do
    sortedResults[index] = {test = test, passed = passed}
    index = index + 1
end

table.sort(sortedResults, function(a, b)
    return a.test < b.test
end)

if damn == false then
    for i, v in pairs (forFile) do
        appendfile("fUNC.txt", "❌ "..i .. " ".. v .. "\n")
    end
end

if damn == true then
    table.foreach(cachedFuncs, warn)
else
    for i, v in ipairs (cachedFuncs) do
        appendfile("fUNC.txt", i .. " ".. v.." \n")
    end
    appendfile("fUNC.txt", "\n\n\n")
end

print('\n\n\n')

for _, result in next, sortedResults do
    if result.passed then
        if damn == true then
            print("✅ " .. result.test)
        else
            appendfile("fUNC.txt", "✅ " .. _ .. "\n")
        end
    else
        if damn == true then
            print("❌ " .. result.test)
        else
            appendfile("fUNC.txt", "❌ " .. result.test .. "\n")
        end
    end
end

local totalTests = 0

for a,b in next,sortedResults do
    totalTests+=1
end

local passedTests = 0

for _, result in next, sortedResults do
    if result.passed then
        passedTests = passedTests + 1
    end
end

local SRATE = math.floor((passedTests / totalTests) * 100 + 0.5)
print("\n")

if damn == fale then
    appendfile("fUNC.txt", "\n")
end

if game.PlaceId ~= 4483381587 then
    if damn == true then
        print("⚠ Your results may not be as accurate, I recommend joining 'a literal baseplate' ⚠")
    else
        appendfile("fUNC.txt", "⚠ Your results may not be as accurate, I recommend joining 'a literal baseplate' ⚠")
    end
end

if damn == true then
    print("\240\159\152\142 Passed the test with "..SRATE.."% success rate ("..passedTests.." out of "..totalTests..")")
    print("❌ Total tests failed: "..totalTests-passedTests)
    print("\240\159\152\143 This test was made by floydS (fuck all the inco pastes/unc fakers)")
else
    appendfile("fUNC.txt","\240\159\152\142 Passed the test with "..SRATE.."% success rate ("..passedTests.." out of "..totalTests..")")
    appendfile("fUNC.txt","\n")
    appendfile("fUNC.txt","❌ Total tests failed: "..totalTests-passedTests)
    appendfile("fUNC.txt","\n")
    appendfile("fUNC.txt","\240\159\152\143 This test was made by floydS (fuck all the inco pastes/unc fakers)")
end

local a = Soap - tick()
local coocoo = tostring(a)
if coocoo:sub(1, 1) == "-" then
    coocoo = coocoo:sub(2)
end
local coocoo = tonumber(coocoo)

function truncateToOneDecimal(num)
    return math.floor(num * 10) / 10
end

if damn == true then
    print(("Finished the test in "..truncateToOneDecimal(coocoo).. " seconds"))
    print('\n')
else
    appendfile("fUNC.txt","\n")
    appendfile("fUNC.txt", "Finished the test in "..truncateToOneDecimal(coocoo).. " seconds")
    appendfile("fUNC.txt","\n")
end

print("fUNC, VERSION 1.2 ")
end
fankshan()
